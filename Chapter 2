Chapter 2  Variables, expressions and statements
One of the most powerful features of a programming language is the ability to manipulate variables. 🌟
A variable is a name that refers to a value.🌟
  2.1  Assignment statements
An assignment statement creates a new variable and gives it a value: 🌟
>>> message = 'And now for something completely different'
>>> n = 17
>>> pi = 3.141592653589793
This example makes three assignments. 
The first assigns a string to a new variable named message; the second gives the integer 17 to n; the third assigns the (approximate) value of π to pi.
A common way to represent variables on paper is to write the name with an arrow pointing to its value. 🌟
This kind of figure is called a state diagram because it shows what state each of the variables is in (think of it as the variable’s state of mind). 🌟
Figure 2.1 shows the result of the previous example.
n ➡️ 17
  2.2  Variable names
Programmers generally choose names for their variables that are meaningful—they document what the variable is used for.🌟
Variable names can be as long as you like.
They can contain both letters and numbers, but they can’t begin with a number. 🌟
It is legal to use uppercase letters, but it is conventional to use only lower case for variables names.🌟
The underscore character, _, can appear in a name. 🌟
It is often used in names with multiple words, such as your_name or airspeed_of_unladen_swallow.
If you give a variable an illegal name, you get a syntax error:
>>> 76trombones = 'big parade'
SyntaxError: invalid syntax
>>> more@ = 1000000
SyntaxError: invalid syntax
>>> class = 'Advanced Theoretical Zymurgy'
SyntaxError: invalid syntax
76trombones is illegal because it begins with a number. 
more@ is illegal because it contains an illegal character, @. 
But what’s wrong with class?
It turns out that class is one of Python’s keywords.🌟
The interpreter uses keywords to recognize the structure of the program, and they cannot be used as variable names.
Python 3 has these keywords:🌟
False      class      finally    is         return
None       continue   for        lambda     try
True       def        from       nonlocal   while
and        del        global     not        with
as         elif       if         or         yield
assert     else       import     pass
break      except     in         raise
You don’t have to memorize this list. 
In most development environments, keywords are displayed in a different color; if you try to use one as a variable name, you’ll know.
  2.3  Expressions and statements
An expression is a combination of values, variables, and operators.🌟
A value all by itself is considered an expression, and so is a variable, so the following are all legal expressions:
>>> 42
42
>>> n
17
>>> n + 25
42
When you type an expression at the prompt, the interpreter evaluates it, which means that it finds the value of the expression.🌟
In this example, n has the value 17 and n + 25 has the value 42.
A statement is a unit of code that has an effect, like creating a variable or displaying a value.🌟
>>> n = 17
>>> print(n)
The first line is an assignment statement that gives a value to n. 
The second line is a print statement that displays the value of n.
When you type a statement, the interpreter executes it, which means that it does whatever the statement says. 🌟
In general, statements don’t have values.🌟
  2.4  Script mode
So far we have run Python in interactive mode, which means that you interact directly with the interpreter.
Interactive mode is a good way to get started, but if you are working with more than a few lines of code, it can be clumsy.
The alternative is to save code in a file called a script and then run the interpreter in script mode to execute the script.🌟
By convention, Python scripts have names that end with .py.
If you know how to create and run a script on your computer, you are ready to go. 
Otherwise I recommend using PythonAnywhere again. 
I have posted instructions for running in script mode at http://tinyurl.com/thinkpython2e.
Because Python provides both modes, you can test bits of code in interactive mode before you put them in a script. 
But there are differences between interactive mode and script mode that can be confusing.
For example, if you are using Python as a calculator, you might type
>>> miles = 26.2
>>> miles * 1.61
42.182
The first line assigns a value to miles, but it has no visible effect.
The second line is an expression, so the interpreter evaluates it and displays the result.
It turns out that a marathon is about 42 kilometers.
But if you type the same code into a script and run it, you get no output at all. 
In script mode an expression, all by itself, has no visible effect. 🌟
Python actually evaluates the expression, but it doesn’t display the value unless you tell it to:🌟
miles = 26.2
print(miles * 1.61)
This behavior can be confusing at first.
A script usually contains a sequence of statements.
If there is more than one statement, the results appear one at a time as the statements execute.🌟
For example, the script
print(1)
x = 2
print(x)
produces the output
1
2
The assignment statement produces no output.🌟
To check your understanding, type the following statements in the Python interpreter and see what they do:
5
x = 5
x + 1
Now put the same statements in a script and run it. 
What is the output? 
Modify the script by transforming each expression into a print statement and then run it again.
  2.5  Order of operations
When an expression contains more than one operator, the order of evaluation depends on the order of operations.
For mathematical operators, Python follows mathematical convention. 
The acronym PEMDAS is a useful way to remember the rules:





















